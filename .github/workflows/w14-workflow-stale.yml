# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 14. Mark stale issues and pull requests

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Run Details'
        required: false
        default: 'PKScreener - Mark stale issues and pull requests'
  schedule:
  - cron: '30 11 * * 1'

jobs:
  stale:

    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    steps:
    - uses: actions/stale@v3
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-issue-message: 'This Issue is marked as Stale due to Inactivity. This Issue will be Closed soon.'
        stale-pr-message: 'This PR is marked as Stale due to Inactivity.'
        days-before-stale: 15
        days-before-close: 5
        days-before-pr-close: -1
        exempt-issue-labels: 'Maintenance,enhancement,documentation'
        # On Windows https://cli.github.com/manual/gh_run_list
        # gh run list --json databaseId -q '.[].databaseId' |
        # ForEach-Object {
        #   gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/$_" -X DELETE
        #   }

        # On Mac/Linux:
        # gh run list -w "13. Backtest for Generic" --limit 500 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
  Delete_Workflow_Run:
    runs-on: ubuntu-latest
    needs: [stale]
    name: Delete workflow run
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Delete this workflow run
        if: startsWith(runner.os, 'Linux')
        shell: bash
        run: |
          for id in $(gh run list --limit 3000 --jq ".[] | select (.status == \"completed\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
          # Cancel runs queued or in_progress. See https://cli.github.com/manual/gh_run_list
          # for id in $(gh run list -w "13. Backtest for Generic" --limit 100 --jq ".[] | select (.status == \"queued\" ) | .databaseId" --json databaseId,status); do gh run cancel $id; done 
        env:
          GH_TOKEN : ${{secrets.GITHUB_TOKEN}}