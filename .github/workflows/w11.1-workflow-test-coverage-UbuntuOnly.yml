# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 11.1 pkscreener Test Coverage on Ubuntu Only

on:
  # schedule:
  #   #   # Nightly at 1:32 A.M. UTC
  #   - cron: "32 1 */1 * *"
  push:
    branches:
      - main
      # Release branches of the format 0.45.20240910.554 
      # - "[0-9]+.[0-9]+.[0-9]+.[0-9]"
  # pull_request:
  #   branches:
  #     - main
  #     - "[0-9]+.[0-9]+.[0-9]+.[0-9]"
  workflow_dispatch:
    inputs:
      branch-name:
        description: 'Branch name'
        required: false
        default: 'main'
      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.12'
  workflow_call:
    inputs:
      branch-name:
        required: true
        type: string
        default: 'new-features'
      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.12'
jobs:
  # Job for testing coverage
  Build:
    name: Build and test/update coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            TARGET: Linux
            CMD_BUILD: |
              rm -rf .pytest_cache
              rm -rf pkscreener/__pycache__
              rm -rf test/__pycache__
              rm -rf test/.coverage
              rm -rf .coverage
              find . -name "*.pyc" -exec rm -rf {} \;
              sudo find /tmp/ -name "*.py" -exec rm -rf {} \;
              find . -name ".coverage.*" -exec rm -rf {} \;
            DEP_BUILD: |
              cd .github/dependencies/
              pwd
              sudo dpkg -i ta-lib_0.6.4_amd64.deb
              cd /home/runner/work/PKScreener/PKScreener/
              python3 -m pip install --upgrade pip
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
              pip3 install ta-lib
              pip3 install .
              # note: the following also installs "coverage"
              python3 -m pip install coveralls
            TEST_BUILD: |
              coverage erase
              coverage run --source=${package_name} --branch -m pytest -vv --durations-min=0.005 --cov-config=.coveragerc --durations=0
              coverage combine
              # quick local report output to console:
              coverage report -i
              coverage html -i
              coverage xml -i
              curl -s https://codecov.io/bash | bash
              coveralls --service=github
              # coverage run --source=${package_name} --branch -m pytest --cov=pkscreener test/
              # coveralls --service=github
          # - os: windows-latest
          #   TARGET: Windows
          #   CMD_BUILD: |
          #     echo Building
          #   DEP_BUILD: |
          #     python3 -m pip install --upgrade pip
          #     echo Installing TA-lib...
          #     cd .github/dependencies/
          #     if [[ "${{ inputs.targetPythonVersion }}" == "" ]] ;then
          #       pip3 install TA_Lib-0.4.29-cp311-cp311-win_amd64.whl
          #     elif [[ "${{ inputs.targetPythonVersion }}" == "3.9" ]] ;then
          #       pip3 install TA_Lib-0.4.19-cp39-cp39-win_amd64.whl
          #     elif [[ "${{ inputs.targetPythonVersion }}" == "3.11" ]] ;then
          #       pip3 install TA_Lib-0.4.29-cp311-cp311-win_amd64.whl
          #     elif [[ "${{ inputs.targetPythonVersion }}" == "3.12" ]] ;then
          #       pip3 install ta_lib-0.6.0-cp312-cp312-win_amd64.whl
          #     fi
          #     cd ..
          #     cd ..
          #     python3 -m pip install --upgrade pip
          #     pip3 install -r requirements.txt
          #     pip3 install -r requirements-dev.txt
          #     pip3 install .
          #   TEST_BUILD: |
          #     python3 -m pytest -vv --durations-min=0.005 --cov-config=.coveragerc --durations=0
          # - os: macos-latest
          #   TARGET: MacOS
          #   CMD_BUILD: |
          #     rm -rf .pytest_cache
          #     rm -rf pkscreener/__pycache__
          #     rm -rf test/__pycache__
          #     rm -rf test/.coverage
          #     rm -rf .coverage
          #     find . -name "*.pyc" -exec rm -rf {} \;
          #     find . -name ".coverage.*" -exec rm -rf {} \;
          #   DEP_BUILD: |
          #     brew install ta-lib
          #     arch -arm64 brew install ta-lib
          #     python3 -m pip install --upgrade pip
          #     brew install python-setuptools
          #     pip3 uninstall -y PKNSETools
          #     pip3 uninstall -y PKDevTools
          #     pip3 install -r requirements.txt
          #     pip3 install -r requirements-dev.txt
          #     export TA_INCLUDE_PATH="$(brew --prefix ta-lib)/include"
          #     export TA_LIBRARY_PATH="$(brew --prefix ta-lib)/lib"
          #     python3 -m pip install --no-cache-dir ta-lib
          #     pip3 install -r requirements.txt
          #     pip3 install -r requirements-dev.txt
          #     pip3 install .
          #   TEST_BUILD: |
          #     python3 -m pytest -vv --durations-min=0.005 --cov-config=.coveragerc --durations=0

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch-name || github.head_ref || github.ref }}

      - name: Activate virtualenv for MacOS
        if: startsWith(runner.os, 'MacOS')
        run: |
          python3 -m venv venv
          source venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Declare env variables
        id: vars
        env:
          CHAT_ID_DEV : ${{secrets.CHAT_ID_DEV}}
          TOKEN_DEV : ${{secrets.TOKEN_DEV}}
          CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}
        shell: bash
        run: |
          python3 -c "import os; file = open('pkscreener/.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_DEV']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.close()"
          GITHUB_REF=${GITHUB_REF#refs/tags/}
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - name: Set up Python 
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.targetPythonVersion || 3.12 }}

      - name: Load Cache for Linux Dependencies
        uses: actions/cache@v4
        if: startsWith(runner.os, 'Linux')
        with:
          path: |
            /usr/include/ta-lib
            /usr/bin/ta-lib-config
          key: ${{ runner.os }}-talib
          restore-keys: |
            ${{ runner.os }}-talib

      - name: Install dependencies for ${{ matrix.TARGET }}
        shell: bash
        run: ${{ matrix.DEP_BUILD }}

      - name: Build for ${{ matrix.TARGET }}
        run: ${{ matrix.CMD_BUILD }}

      - name: Test Built Binary for ${{ matrix.TARGET }}
        shell: bash
        timeout-minutes: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: ${{ matrix.TEST_BUILD }}
        continue-on-error: false

  # Delete_Workflow_Run:
  #   runs-on: ubuntu-latest
  #   needs: [Build]
  #   name: Delete workflow run
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: main
          
  #     - name: Delete this workflow run
  #       if: startsWith(runner.os, 'Linux')
  #       shell: bash
  #       run: |
  #         for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"success\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"cancelled\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"failure\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         # Cancel runs queued or in_progress. See https://cli.github.com/manual/gh_run_list
  #         # for id in $(gh run list -w "13. Backtest for Generic" --limit 100 --jq ".[] | select (.status == \"queued\" ) | .databaseId" --json databaseId,status); do gh run cancel $id; done 
  #       env:
  #         GH_TOKEN : ${{secrets.GITHUB_TOKEN}}