# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 13. Backtest for Generic

on:
  workflow_dispatch:
    inputs:
      id:
        description: 'run identifier'
        required: false
      name:
        description: 'Backtest for Generic'
        required: false
        default: 'B_12_1'
      params:
        description: 'Backtest for Generic'
        required: false
        default: '12:1'
      user:
        description: 'Telegram user'
        required: false
        default: '-1001785195297'
      intraday:
        description: 'Intraday?'
        required: false
        default: ''
      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.12'
      runson:
          description: 'Runner OS. e.g: ubuntu-latest, windows-latest or macos-latest'
          required: false
          default: 'ubuntu-latest'
      installtalib:
        description: 'Is TA-Lib install required? (Y/N)'
        required: false
        default: 'N'

run-name: ${{ inputs.name }} Backtest for Generic params- ${{ inputs.params }}

jobs:

  Generic:
    runs-on: ${{ inputs.runson || 'ubuntu-latest' }} #ubuntu-latest #windows-latest
    outputs:
      runIdentifier: ${{ github.event.inputs.id }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: gh-pages

    - name: Set up Python 
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.targetPythonVersion || 3.12 }}

    - name: Restore Dependencies from Windows Cache
      if: startsWith(runner.os, 'Windows')
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
  
    - name: Load Cache for Linux Dependencies
      uses: actions/cache@v4
      if: startsWith(runner.os, 'Linux')
      with:
        path: |
          /usr/include/ta-lib
          /usr/bin/ta-lib-config
          /usr/lib/libta_lib.la
          /usr/lib/libta_lib.a
        key: ${{ runner.os }}-talib
        restore-keys: |
          ${{ runner.os }}-talib
            
    - name: Install TA-Lib for Windows
      if: ${{ inputs.installtalib != 'N' && startsWith(runner.os, 'Windows') }}
      shell: bash
      run: |
        python3 -m pip install --upgrade pip
        cd .github/dependencies/
        if [[ "${{ inputs.targetPythonVersion }}" == "" ]] ;then
          pip3 install ta_lib-0.6.0-cp312-cp312-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.9" ]] ;then
          pip3 install TA_Lib-0.4.19-cp39-cp39-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.11" ]] ;then
          pip3 install TA_Lib-0.4.29-cp311-cp311-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.12" ]] ;then
          pip3 install ta_lib-0.6.0-cp312-cp312-win_amd64.whl
        fi
  
    - name: Install TA-Lib for Linux
      if: ${{ inputs.installtalib != 'N' && startsWith(runner.os, 'Linux') }}
      run: |
        cd .github/dependencies/
        pwd
        tar -xzf ta-lib-0.6.4-src.tar.gz
        cd ta-lib-0.6.4/
        ./configure --prefix=/usr
        make
        sudo make install
        cd /home/runner/work/PKScreener/PKScreener/
        pip3 install ta-lib

    - name: Environment setup to get latest EXE
      shell: bash
      id: releaseurlsetter
      run: |
        pip3 install requests
        python3 .github/workflows/githubutilities.py -d
  
    - name: Download latest executable on Windows
      shell: cmd
      if: startsWith(runner.os, 'Windows')
      env:
        exe_path: ${{ steps.releaseurlsetter.outputs.DOWNLOAD_URL }}
      run: |
        curl -o pkscreenercli.exe -JL %exe_path%

    - name: Download latest executable on Ubuntu
      shell: bash
      if: startsWith(runner.os, 'Linux')
      env:
        exe_path: ${{ steps.releaseurlsetter.outputs.DOWNLOAD_URL }}
      run: |
        curl -o /home/runner/work/PKScreener/PKScreener/pkscreenercli.bin -JL $exe_path
        chmod +x /home/runner/work/PKScreener/PKScreener/pkscreenercli.bin
      
    - name: Configure .env.dev file
      shell: bash
      env:
        CHAT_ID_DEV : ${{secrets.CHAT_ID_DEV}}
        TOKEN_DEV : ${{secrets.TOKEN_DEV}}
        CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}
      run: |
          python3 -c "import os; file = open('.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_DEV']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.close()"
  
    # - name: Send notification about this workflow trigger
    #   shell: bash
    #   env:
    #     NOTIFY_USER : ${{ inputs.user }}
    #     BACKTEST_NAME: ${{ inputs.name }}
    #   run: |
    #       pip3 install PKDevTools
    #       python3 -c "import os; from PKDevTools.classes.Telegram import send_message; send_message(message='Hello! The workflow('+os.environ['BACKTEST_NAME']+') has been triggered for backtesting (https://github.com/pkjmesra/PKScreener/actions).Results will be updated at https://pkjmesra.github.io/PKScreener/BacktestReports.html when workflow gets over. You can also check directly at https://pkjmesra.github.io/PKScreener/Backtest-Reports/PKScreener_'+os.environ['BACKTEST_NAME']+'_Summary_StockSorted.html for summary and https://pkjmesra.github.io/PKScreener/Backtest-Reports/PKScreener_'+os.environ['BACKTEST_NAME']+'_backtest_result_StockSorted.html for details.', userID=os.environ['NOTIFY_USER']);"
          
    - name: Run backtest on Windows
      shell: cmd
      continue-on-error: true
      timeout-minutes: 60
      if: startsWith(runner.os, 'Windows')
      env:
        RUNNER : "GitHub_Actions"
        BACKTEST_NAME: ${{ inputs.name }}
      run: |
        pkscreenercli.exe -a Y -e -v -o B:30:${{ inputs.params }} -u ${{ inputs.user }}
        copy /Y results\* Backtest-Reports

    - name: Run backtest on Linux
      shell: bash
      continue-on-error: true
      timeout-minutes: 60
      if: startsWith(runner.os, 'Linux')
      env:
        RUNNER : "GitHub_Actions"
        BACKTEST_NAME: ${{ inputs.name }}
      run: |
        /home/runner/work/PKScreener/PKScreener/pkscreenercli.bin -a Y -e -v -o B:30:${{ inputs.params }} -u ${{ inputs.user }}
        ls -l results
        ls -l Backtest-Reports
        cp results/*.html Backtest-Reports
        # python3 pkscreener/pkscreenercli.py -a Y -e -p -o B:30:${{ inputs.params }} -u ${{ inputs.user }}
  
    - name: Push backtest and summary reports
      continue-on-error: true
      shell: bash
      run: |
        pip3 install pandas
        pip3 install pytz
        pip3 install PKDevTools
        pip3 install PKNSETools
        git config user.name github-actions
        git config user.email github-actions@github.com
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git config --global http.postBuffer 150000000
        git remote update
        git fetch
        git pull
        git push -v -u origin +gh-pages
        git pull
        git add Backtest-Reports/PKScreener_${{ inputs.name }}_backtest_result_StockSorted.html --force
        git add Backtest-Reports/PKScreener_${{ inputs.name }}_Summary_StockSorted.html --force
        git add Backtest-Reports/PKScreener_${{ inputs.name }}_OneLine_Summary.html --force
        git add Backtest-Reports/PKScreener_${{ inputs.name }}_Insights_DateSorted.html --force
        git commit -m "GitHub-Action-Workflow-Backtest-Reports-(${{ inputs.name }})"
        git pull
        git push -v -u origin +gh-pages
    
    - name: Push main landing page
      continue-on-error: true
      shell: bash
      run: |
        pip3 install .
        git pull
        python3 .github/workflows/workflowtriggers.py -r ${{ inputs.intraday }} -s0 "S,T,E,U,Z,F,H,Y,X,F,G,C,M,D,I,L,P" -s1 "W,N,E,M,Z,S,0,2,3,4,6,7,9,10,13,15" -s2 "0,21,22,29,42,50,M,Z" -s3 "0" -s4 "0"
        git add BacktestReports.html --force
        git add BacktestReportsIntraday.html --force
        git commit -m "GitHub-Action-Workflow-Backtest-Reports-(${{ inputs.name }})"
        git pull
        git push -v -u origin +gh-pages
    
    # - name: Delete this workflow run
    #   if: startsWith(runner.os, 'Linux')
    #   shell: bash
    #   run: |
    #     gh run list --status success --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
    #     gh run list --status cancelled --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
    #   env:
    #     GH_TOKEN : ${{secrets.GITHUB_TOKEN}}

    # - name: Send notification about finished workflow trigger
    #   shell: bash
    #   env:
    #     NOTIFY_USER : ${{ inputs.user }}
    #     BACKTEST_NAME: ${{ inputs.name }}
    #   run: |
    #       python3 -c "import os; from PKDevTools.classes.Telegram import send_message; send_message(message='Hello! The workflow('+os.environ['BACKTEST_NAME']+') for backtesting has finished and will soon get deployed in the next 2-3 minutes. You can check directly at https://pkjmesra.github.io/PKScreener/Backtest-Reports/PKScreener_'+os.environ['BACKTEST_NAME']+'_Summary_StockSorted.html for summary and https://pkjmesra.github.io/PKScreener/Backtest-Reports/PKScreener_'+os.environ['BACKTEST_NAME']+'_backtest_result_StockSorted.html for details after it gets deployed.', userID=os.environ['NOTIFY_USER']);"

  # Delete_Workflow_Run:
  #   runs-on: ubuntu-latest
  #   needs: [Generic]
  #   name: Delete workflow run
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: main

  #     - name: Delete this workflow run
  #       if: startsWith(runner.os, 'Linux')
  #       shell: bash
  #       run: |
  #         for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"success\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"cancelled\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"failure\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         gh run list -w "pages-build-deployment" --status cancelled --limit 100 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
  #         gh run list -w "pages-build-deployment" --status success --limit 100 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
  #         # echo ${{ needs.Generic.outputs.runIdentifier }} | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
  #         # Cancel runs queued or in_progress. See https://cli.github.com/manual/gh_run_list
  #         # for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"queued\" ) | .databaseId" --json databaseId,status); do gh run cancel $id; done 
  #       env:
  #         GH_TOKEN : ${{secrets.GITHUB_TOKEN}}
